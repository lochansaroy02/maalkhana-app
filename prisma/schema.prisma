generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model District {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  users        User[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String @id @default(uuid())
  name          String
  policeStation String
  rank          String
  role          String
  mobileNo      String
  email         String @unique
  passwordHash  String

  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  entries   MalkhanaEntry[]
  vehicles  SeizedVehicle[]
  releases  MalkhanaRelease[]
  movements MalkhanaMovement[]

  districtId String
  District   District @relation(fields: [districtId], references: [id])
}

model SeizedVehicle {
  id             String  @id @default(cuid())
  districtId     String?
  srNo           String
  firNo          String? @unique
  gdNo           String
  gdDate         String
  underSection   String  @default("207")
  vehicleType    String
  colour         String
  registrationNo String
  engineNo       String
  description    String
  status         String
  policeStation  String
  ownerName      String
  seizedBy       String
  caseProperty   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model MalkhanaEntry {
  id           String @id @default(uuid())
  wine         Int?
  wineType     String
  photoUrl     String @default("")
  srNo         String
  gdNo         String
  gdDate       String
  underSection String

  Year          String
  policeStation String
  IOName        String
  vadiName      String
  HM            String
  accused       String
  firNo         String?  @unique
  status        String
  entryType     String
  place         String
  boxNo         String
  courtNo       String
  courtName     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  districtId    String?
  User          User?    @relation(fields: [userId], references: [id])
  userId        String?
}

model MalkhanaMovement {
  id             String  @id @default(cuid())
  srNo           String
  moveDate       String
  firNo          String  @unique
  underSection   String
  takenOutBy     String
  moveTrackingNo String
  movePurpose    String
  name           String
  photo          String?
  document       String?

  isReturned     Boolean  @default(false)
  receviedBy     String
  returnBackFrom String
  returnDate     DateTime

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  districtId String?
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model MalkhanaRelease {
  id              String @id @default(cuid())
  srNo            String
  moveDate        String
  firNo           String @unique
  underSection    String
  takenOutBy      String
  moveTrackingNo  String
  movePurpose     String
  name            String
  recevierName    String
  fathersName     String
  address         String
  mobile          String
  releaseItemName String

  photo    String?
  document String?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  districtId String?
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model Report {
  id            String @id @default(cuid())
  movementCount Int
}
